// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

type AutoScalingInput struct {
	Replicas ReplicasInput             `json:"replicas"`
	Triggers []AutoScalingTriggerInput `json:"triggers"`
}

// GetReplicas returns AutoScalingInput.Replicas, and is useful for accessing the field via an interface.
func (v *AutoScalingInput) GetReplicas() ReplicasInput { return v.Replicas }

// GetTriggers returns AutoScalingInput.Triggers, and is useful for accessing the field via an interface.
func (v *AutoScalingInput) GetTriggers() []AutoScalingTriggerInput { return v.Triggers }

type AutoScalingTriggerInput struct {
	Type      AutoScalingType `json:"type"`
	Threshold int             `json:"threshold"`
}

// GetType returns AutoScalingTriggerInput.Type, and is useful for accessing the field via an interface.
func (v *AutoScalingTriggerInput) GetType() AutoScalingType { return v.Type }

// GetThreshold returns AutoScalingTriggerInput.Threshold, and is useful for accessing the field via an interface.
func (v *AutoScalingTriggerInput) GetThreshold() int { return v.Threshold }

type AutoScalingType string

const (
	AutoScalingTypeMemory AutoScalingType = "MEMORY"
	AutoScalingTypeCpu    AutoScalingType = "CPU"
)

var AllAutoScalingType = []AutoScalingType{
	AutoScalingTypeMemory,
	AutoScalingTypeCpu,
}

type ContainerCreateInput struct {
	Name      string             `json:"name"`
	Namespace string             `json:"namespace"`
	Resources ContainerResources `json:"resources"`
	Registry  *string            `json:"registry"`
	Image     string             `json:"image"`
	// Environment variables to be set in the job.
	EnvironmentVariables []EnvironmentVariableInput `json:"environmentVariables"`
	Mounts               []MountInput               `json:"mounts"`
	Ports                []string                   `json:"ports"`
	Ingresses            []IngressInput             `json:"ingresses"`
	Scaling              *ScalingInput              `json:"scaling"`
	// Health check performed to check the status of the container.
	// Health checks are directly performed on the container so your application must expose
	// the port. Port mappings specified in the ports field are not used by the health check.
	//
	// When you want to disable the health check you must send us a null value. To leave the
	// current health check unchanged you can omit this field.
	HealthCheck *HealthCheckInput `json:"healthCheck"`
}

// GetName returns ContainerCreateInput.Name, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetName() string { return v.Name }

// GetNamespace returns ContainerCreateInput.Namespace, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetNamespace() string { return v.Namespace }

// GetResources returns ContainerCreateInput.Resources, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetResources() ContainerResources { return v.Resources }

// GetRegistry returns ContainerCreateInput.Registry, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetRegistry() *string { return v.Registry }

// GetImage returns ContainerCreateInput.Image, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetImage() string { return v.Image }

// GetEnvironmentVariables returns ContainerCreateInput.EnvironmentVariables, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetEnvironmentVariables() []EnvironmentVariableInput {
	return v.EnvironmentVariables
}

// GetMounts returns ContainerCreateInput.Mounts, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetMounts() []MountInput { return v.Mounts }

// GetPorts returns ContainerCreateInput.Ports, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetPorts() []string { return v.Ports }

// GetIngresses returns ContainerCreateInput.Ingresses, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetIngresses() []IngressInput { return v.Ingresses }

// GetScaling returns ContainerCreateInput.Scaling, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetScaling() *ScalingInput { return v.Scaling }

// GetHealthCheck returns ContainerCreateInput.HealthCheck, and is useful for accessing the field via an interface.
func (v *ContainerCreateInput) GetHealthCheck() *HealthCheckInput { return v.HealthCheck }

type ContainerJobCreateInput struct {
	Name      string             `json:"name"`
	Namespace string             `json:"namespace"`
	Resources ContainerResources `json:"resources"`
	Registry  *string            `json:"registry"`
	Image     string             `json:"image"`
	// Entrypoint of the container.
	// This field will overwrite the default entrypoint of the image. When the field is omitted, the default entrypoint of the image will be used.
	//
	// Null will reset the command to the default.
	//
	// Entry point is the first command executed when the container starts. It will receive the command as arguments.
	// For example when the entrypoint is `python`, the command `app.py` will be executed as `python app.py`.
	//
	// This field is defined in docker exec format. https://docs.docker.com/reference/dockerfile/#shell-and-exec-form
	Entrypoint []string `json:"entrypoint"`
	// Command to run.
	// This is the command executed at the given schedule.
	// When the field is omitted, the default command of the image will be used.
	//
	// Null will reset the command to the default.
	// The command will be passed to the entrypoint as arguments. Use quotes to pass an argument with spaces.
	//
	// Environment variables can be used in the command by using the syntax `$(ENVIRONMENT_VARIABLE)`.
	//
	// Example: `echo "Hello $(NAME)"`.
	//
	// This field is defined in docker exec format. https://docs.docker.com/reference/dockerfile/#shell-and-exec-form
	Command []string `json:"command"`
	// Enable or disable the job.
	// By disabling a job, it will not be executed, we do keep the configuration.
	Enabled bool `json:"enabled"`
	// Cron notation to schedule jobs.
	// Format is equal to regular cron notation.
	// For example, to run a job every day at 4am, use `0 4 * * *`.
	// You can use https://crontab.guru/ to help you build your cron expressions.
	Schedule string `json:"schedule"`
	// Environment variables to be set in the job.
	EnvironmentVariables []EnvironmentVariableInput `json:"environmentVariables"`
	Mounts               []MountInput               `json:"mounts"`
}

// GetName returns ContainerJobCreateInput.Name, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetName() string { return v.Name }

// GetNamespace returns ContainerJobCreateInput.Namespace, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetNamespace() string { return v.Namespace }

// GetResources returns ContainerJobCreateInput.Resources, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetResources() ContainerResources { return v.Resources }

// GetRegistry returns ContainerJobCreateInput.Registry, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetRegistry() *string { return v.Registry }

// GetImage returns ContainerJobCreateInput.Image, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetImage() string { return v.Image }

// GetEntrypoint returns ContainerJobCreateInput.Entrypoint, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetEntrypoint() []string { return v.Entrypoint }

// GetCommand returns ContainerJobCreateInput.Command, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetCommand() []string { return v.Command }

// GetEnabled returns ContainerJobCreateInput.Enabled, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetEnabled() bool { return v.Enabled }

// GetSchedule returns ContainerJobCreateInput.Schedule, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetSchedule() string { return v.Schedule }

// GetEnvironmentVariables returns ContainerJobCreateInput.EnvironmentVariables, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetEnvironmentVariables() []EnvironmentVariableInput {
	return v.EnvironmentVariables
}

// GetMounts returns ContainerJobCreateInput.Mounts, and is useful for accessing the field via an interface.
func (v *ContainerJobCreateInput) GetMounts() []MountInput { return v.Mounts }

type ContainerJobModifyInput struct {
	Name      string              `json:"name"`
	Namespace string              `json:"namespace"`
	Resources *ContainerResources `json:"resources"`
	Registry  *string             `json:"registry"`
	Image     *string             `json:"image"`
	// Entrypoint of the container.
	// This field will overwrite the default entrypoint of the image. When the field is omitted, the default entrypoint of the image will be used.
	//
	// Null will reset the command to the default.
	//
	// Entry point is the first command executed when the container starts. It will receive the command as arguments.
	// For example when the entrypoint is `python`, the command `app.py` will be executed as `python app.py`.
	//
	// This field is defined in docker exec format. https://docs.docker.com/reference/dockerfile/#shell-and-exec-form
	Entrypoint []string `json:"entrypoint"`
	// Command to run.
	// This is the command executed at the given schedule.
	// When the field is omitted, the default command of the image will be used.
	//
	// Null will reset the command to the default.
	// The command will be passed to the entrypoint as arguments. Use quotes to pass an argument with spaces.
	//
	// Environment variables can be used in the command by using the syntax `$(ENVIRONMENT_VARIABLE)`.
	//
	// Example: `echo "Hello $(NAME)"`.
	//
	// This field is defined in docker exec format. https://docs.docker.com/reference/dockerfile/#shell-and-exec-form
	Command []string `json:"command"`
	// Enable or disable the job.
	// By disabling a job, it will not be executed, we do keep the configuration.
	Enabled *bool `json:"enabled"`
	// Cron notation to schedule jobs.
	// Format is equal to regular cron notation.
	// For example, to run a job every day at 4am, use `0 4 * * *`.
	// You can use https://crontab.guru/ to help you build your cron expressions.
	Schedule *string `json:"schedule"`
	// Environment variables to be set in the job.
	EnvironmentVariables []EnvironmentVariableInput `json:"environmentVariables"`
	Mounts               []MountInput               `json:"mounts"`
}

// GetName returns ContainerJobModifyInput.Name, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetName() string { return v.Name }

// GetNamespace returns ContainerJobModifyInput.Namespace, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetNamespace() string { return v.Namespace }

// GetResources returns ContainerJobModifyInput.Resources, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetResources() *ContainerResources { return v.Resources }

// GetRegistry returns ContainerJobModifyInput.Registry, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetRegistry() *string { return v.Registry }

// GetImage returns ContainerJobModifyInput.Image, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetImage() *string { return v.Image }

// GetEntrypoint returns ContainerJobModifyInput.Entrypoint, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetEntrypoint() []string { return v.Entrypoint }

// GetCommand returns ContainerJobModifyInput.Command, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetCommand() []string { return v.Command }

// GetEnabled returns ContainerJobModifyInput.Enabled, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetEnabled() *bool { return v.Enabled }

// GetSchedule returns ContainerJobModifyInput.Schedule, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetSchedule() *string { return v.Schedule }

// GetEnvironmentVariables returns ContainerJobModifyInput.EnvironmentVariables, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetEnvironmentVariables() []EnvironmentVariableInput {
	return v.EnvironmentVariables
}

// GetMounts returns ContainerJobModifyInput.Mounts, and is useful for accessing the field via an interface.
func (v *ContainerJobModifyInput) GetMounts() []MountInput { return v.Mounts }

// ContainerJobResult includes the GraphQL fields of ContainerJob requested by the fragment ContainerJobResult.
type ContainerJobResult struct {
	Name    string `json:"name"`
	Image   string `json:"image"`
	Enabled bool   `json:"enabled"`
	State   string `json:"state"`
}

// GetName returns ContainerJobResult.Name, and is useful for accessing the field via an interface.
func (v *ContainerJobResult) GetName() string { return v.Name }

// GetImage returns ContainerJobResult.Image, and is useful for accessing the field via an interface.
func (v *ContainerJobResult) GetImage() string { return v.Image }

// GetEnabled returns ContainerJobResult.Enabled, and is useful for accessing the field via an interface.
func (v *ContainerJobResult) GetEnabled() bool { return v.Enabled }

// GetState returns ContainerJobResult.State, and is useful for accessing the field via an interface.
func (v *ContainerJobResult) GetState() string { return v.State }

type ContainerModifyInput struct {
	Name      string              `json:"name"`
	Namespace string              `json:"namespace"`
	Resources *ContainerResources `json:"resources"`
	Registry  *string             `json:"registry"`
	Image     *string             `json:"image"`
	// Environment variables to be set in the job.
	EnvironmentVariables []EnvironmentVariableInput `json:"environmentVariables"`
	Mounts               []MountInput               `json:"mounts"`
	Ports                []string                   `json:"ports"`
	Ingresses            []IngressInput             `json:"ingresses"`
	Scaling              *ScalingInput              `json:"scaling"`
	// Health check performed to check the status of the container.
	// Health checks are directly performed on the container so your application must expose
	// the port. Port mappings specified in the ports field are not used by the health check.
	//
	// When you want to disable the health check you must send us a null value. To leave the
	// current health check unchanged you can omit this field.
	HealthCheck *HealthCheckInput `json:"healthCheck"`
}

// GetName returns ContainerModifyInput.Name, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetName() string { return v.Name }

// GetNamespace returns ContainerModifyInput.Namespace, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetNamespace() string { return v.Namespace }

// GetResources returns ContainerModifyInput.Resources, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetResources() *ContainerResources { return v.Resources }

// GetRegistry returns ContainerModifyInput.Registry, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetRegistry() *string { return v.Registry }

// GetImage returns ContainerModifyInput.Image, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetImage() *string { return v.Image }

// GetEnvironmentVariables returns ContainerModifyInput.EnvironmentVariables, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetEnvironmentVariables() []EnvironmentVariableInput {
	return v.EnvironmentVariables
}

// GetMounts returns ContainerModifyInput.Mounts, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetMounts() []MountInput { return v.Mounts }

// GetPorts returns ContainerModifyInput.Ports, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetPorts() []string { return v.Ports }

// GetIngresses returns ContainerModifyInput.Ingresses, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetIngresses() []IngressInput { return v.Ingresses }

// GetScaling returns ContainerModifyInput.Scaling, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetScaling() *ScalingInput { return v.Scaling }

// GetHealthCheck returns ContainerModifyInput.HealthCheck, and is useful for accessing the field via an interface.
func (v *ContainerModifyInput) GetHealthCheck() *HealthCheckInput { return v.HealthCheck }

type ContainerResources string

const (
	ContainerResourcesCpu250Ram500    ContainerResources = "CPU_250_RAM_500"
	ContainerResourcesCpu250Ram1000   ContainerResources = "CPU_250_RAM_1000"
	ContainerResourcesCpu250Ram2000   ContainerResources = "CPU_250_RAM_2000"
	ContainerResourcesCpu250Ram3000   ContainerResources = "CPU_250_RAM_3000"
	ContainerResourcesCpu250Ram4000   ContainerResources = "CPU_250_RAM_4000"
	ContainerResourcesCpu250Ram5000   ContainerResources = "CPU_250_RAM_5000"
	ContainerResourcesCpu250Ram6000   ContainerResources = "CPU_250_RAM_6000"
	ContainerResourcesCpu250Ram7000   ContainerResources = "CPU_250_RAM_7000"
	ContainerResourcesCpu250Ram8000   ContainerResources = "CPU_250_RAM_8000"
	ContainerResourcesCpu250Ram9000   ContainerResources = "CPU_250_RAM_9000"
	ContainerResourcesCpu250Ram10000  ContainerResources = "CPU_250_RAM_10000"
	ContainerResourcesCpu250Ram11000  ContainerResources = "CPU_250_RAM_11000"
	ContainerResourcesCpu250Ram12000  ContainerResources = "CPU_250_RAM_12000"
	ContainerResourcesCpu250Ram13000  ContainerResources = "CPU_250_RAM_13000"
	ContainerResourcesCpu250Ram14000  ContainerResources = "CPU_250_RAM_14000"
	ContainerResourcesCpu250Ram15000  ContainerResources = "CPU_250_RAM_15000"
	ContainerResourcesCpu250Ram16000  ContainerResources = "CPU_250_RAM_16000"
	ContainerResourcesCpu500Ram500    ContainerResources = "CPU_500_RAM_500"
	ContainerResourcesCpu500Ram1000   ContainerResources = "CPU_500_RAM_1000"
	ContainerResourcesCpu500Ram2000   ContainerResources = "CPU_500_RAM_2000"
	ContainerResourcesCpu500Ram3000   ContainerResources = "CPU_500_RAM_3000"
	ContainerResourcesCpu500Ram4000   ContainerResources = "CPU_500_RAM_4000"
	ContainerResourcesCpu500Ram5000   ContainerResources = "CPU_500_RAM_5000"
	ContainerResourcesCpu500Ram6000   ContainerResources = "CPU_500_RAM_6000"
	ContainerResourcesCpu500Ram7000   ContainerResources = "CPU_500_RAM_7000"
	ContainerResourcesCpu500Ram8000   ContainerResources = "CPU_500_RAM_8000"
	ContainerResourcesCpu500Ram9000   ContainerResources = "CPU_500_RAM_9000"
	ContainerResourcesCpu500Ram10000  ContainerResources = "CPU_500_RAM_10000"
	ContainerResourcesCpu500Ram11000  ContainerResources = "CPU_500_RAM_11000"
	ContainerResourcesCpu500Ram12000  ContainerResources = "CPU_500_RAM_12000"
	ContainerResourcesCpu500Ram13000  ContainerResources = "CPU_500_RAM_13000"
	ContainerResourcesCpu500Ram14000  ContainerResources = "CPU_500_RAM_14000"
	ContainerResourcesCpu500Ram15000  ContainerResources = "CPU_500_RAM_15000"
	ContainerResourcesCpu500Ram16000  ContainerResources = "CPU_500_RAM_16000"
	ContainerResourcesCpu750Ram500    ContainerResources = "CPU_750_RAM_500"
	ContainerResourcesCpu750Ram1000   ContainerResources = "CPU_750_RAM_1000"
	ContainerResourcesCpu750Ram2000   ContainerResources = "CPU_750_RAM_2000"
	ContainerResourcesCpu750Ram3000   ContainerResources = "CPU_750_RAM_3000"
	ContainerResourcesCpu750Ram4000   ContainerResources = "CPU_750_RAM_4000"
	ContainerResourcesCpu750Ram5000   ContainerResources = "CPU_750_RAM_5000"
	ContainerResourcesCpu750Ram6000   ContainerResources = "CPU_750_RAM_6000"
	ContainerResourcesCpu750Ram7000   ContainerResources = "CPU_750_RAM_7000"
	ContainerResourcesCpu750Ram8000   ContainerResources = "CPU_750_RAM_8000"
	ContainerResourcesCpu750Ram9000   ContainerResources = "CPU_750_RAM_9000"
	ContainerResourcesCpu750Ram10000  ContainerResources = "CPU_750_RAM_10000"
	ContainerResourcesCpu750Ram11000  ContainerResources = "CPU_750_RAM_11000"
	ContainerResourcesCpu750Ram12000  ContainerResources = "CPU_750_RAM_12000"
	ContainerResourcesCpu750Ram13000  ContainerResources = "CPU_750_RAM_13000"
	ContainerResourcesCpu750Ram14000  ContainerResources = "CPU_750_RAM_14000"
	ContainerResourcesCpu750Ram15000  ContainerResources = "CPU_750_RAM_15000"
	ContainerResourcesCpu750Ram16000  ContainerResources = "CPU_750_RAM_16000"
	ContainerResourcesCpu1000Ram500   ContainerResources = "CPU_1000_RAM_500"
	ContainerResourcesCpu1000Ram1000  ContainerResources = "CPU_1000_RAM_1000"
	ContainerResourcesCpu1000Ram2000  ContainerResources = "CPU_1000_RAM_2000"
	ContainerResourcesCpu1000Ram3000  ContainerResources = "CPU_1000_RAM_3000"
	ContainerResourcesCpu1000Ram4000  ContainerResources = "CPU_1000_RAM_4000"
	ContainerResourcesCpu1000Ram5000  ContainerResources = "CPU_1000_RAM_5000"
	ContainerResourcesCpu1000Ram6000  ContainerResources = "CPU_1000_RAM_6000"
	ContainerResourcesCpu1000Ram7000  ContainerResources = "CPU_1000_RAM_7000"
	ContainerResourcesCpu1000Ram8000  ContainerResources = "CPU_1000_RAM_8000"
	ContainerResourcesCpu1000Ram9000  ContainerResources = "CPU_1000_RAM_9000"
	ContainerResourcesCpu1000Ram10000 ContainerResources = "CPU_1000_RAM_10000"
	ContainerResourcesCpu1000Ram11000 ContainerResources = "CPU_1000_RAM_11000"
	ContainerResourcesCpu1000Ram12000 ContainerResources = "CPU_1000_RAM_12000"
	ContainerResourcesCpu1000Ram13000 ContainerResources = "CPU_1000_RAM_13000"
	ContainerResourcesCpu1000Ram14000 ContainerResources = "CPU_1000_RAM_14000"
	ContainerResourcesCpu1000Ram15000 ContainerResources = "CPU_1000_RAM_15000"
	ContainerResourcesCpu1000Ram16000 ContainerResources = "CPU_1000_RAM_16000"
	ContainerResourcesCpu2000Ram500   ContainerResources = "CPU_2000_RAM_500"
	ContainerResourcesCpu2000Ram1000  ContainerResources = "CPU_2000_RAM_1000"
	ContainerResourcesCpu2000Ram2000  ContainerResources = "CPU_2000_RAM_2000"
	ContainerResourcesCpu2000Ram3000  ContainerResources = "CPU_2000_RAM_3000"
	ContainerResourcesCpu2000Ram4000  ContainerResources = "CPU_2000_RAM_4000"
	ContainerResourcesCpu2000Ram5000  ContainerResources = "CPU_2000_RAM_5000"
	ContainerResourcesCpu2000Ram6000  ContainerResources = "CPU_2000_RAM_6000"
	ContainerResourcesCpu2000Ram7000  ContainerResources = "CPU_2000_RAM_7000"
	ContainerResourcesCpu2000Ram8000  ContainerResources = "CPU_2000_RAM_8000"
	ContainerResourcesCpu2000Ram9000  ContainerResources = "CPU_2000_RAM_9000"
	ContainerResourcesCpu2000Ram10000 ContainerResources = "CPU_2000_RAM_10000"
	ContainerResourcesCpu2000Ram11000 ContainerResources = "CPU_2000_RAM_11000"
	ContainerResourcesCpu2000Ram12000 ContainerResources = "CPU_2000_RAM_12000"
	ContainerResourcesCpu2000Ram13000 ContainerResources = "CPU_2000_RAM_13000"
	ContainerResourcesCpu2000Ram14000 ContainerResources = "CPU_2000_RAM_14000"
	ContainerResourcesCpu2000Ram15000 ContainerResources = "CPU_2000_RAM_15000"
	ContainerResourcesCpu2000Ram16000 ContainerResources = "CPU_2000_RAM_16000"
	ContainerResourcesCpu3000Ram500   ContainerResources = "CPU_3000_RAM_500"
	ContainerResourcesCpu3000Ram1000  ContainerResources = "CPU_3000_RAM_1000"
	ContainerResourcesCpu3000Ram2000  ContainerResources = "CPU_3000_RAM_2000"
	ContainerResourcesCpu3000Ram3000  ContainerResources = "CPU_3000_RAM_3000"
	ContainerResourcesCpu3000Ram4000  ContainerResources = "CPU_3000_RAM_4000"
	ContainerResourcesCpu3000Ram5000  ContainerResources = "CPU_3000_RAM_5000"
	ContainerResourcesCpu3000Ram6000  ContainerResources = "CPU_3000_RAM_6000"
	ContainerResourcesCpu3000Ram7000  ContainerResources = "CPU_3000_RAM_7000"
	ContainerResourcesCpu3000Ram8000  ContainerResources = "CPU_3000_RAM_8000"
	ContainerResourcesCpu3000Ram9000  ContainerResources = "CPU_3000_RAM_9000"
	ContainerResourcesCpu3000Ram10000 ContainerResources = "CPU_3000_RAM_10000"
	ContainerResourcesCpu3000Ram11000 ContainerResources = "CPU_3000_RAM_11000"
	ContainerResourcesCpu3000Ram12000 ContainerResources = "CPU_3000_RAM_12000"
	ContainerResourcesCpu3000Ram13000 ContainerResources = "CPU_3000_RAM_13000"
	ContainerResourcesCpu3000Ram14000 ContainerResources = "CPU_3000_RAM_14000"
	ContainerResourcesCpu3000Ram15000 ContainerResources = "CPU_3000_RAM_15000"
	ContainerResourcesCpu3000Ram16000 ContainerResources = "CPU_3000_RAM_16000"
	ContainerResourcesCpu4000Ram500   ContainerResources = "CPU_4000_RAM_500"
	ContainerResourcesCpu4000Ram1000  ContainerResources = "CPU_4000_RAM_1000"
	ContainerResourcesCpu4000Ram2000  ContainerResources = "CPU_4000_RAM_2000"
	ContainerResourcesCpu4000Ram3000  ContainerResources = "CPU_4000_RAM_3000"
	ContainerResourcesCpu4000Ram4000  ContainerResources = "CPU_4000_RAM_4000"
	ContainerResourcesCpu4000Ram5000  ContainerResources = "CPU_4000_RAM_5000"
	ContainerResourcesCpu4000Ram6000  ContainerResources = "CPU_4000_RAM_6000"
	ContainerResourcesCpu4000Ram7000  ContainerResources = "CPU_4000_RAM_7000"
	ContainerResourcesCpu4000Ram8000  ContainerResources = "CPU_4000_RAM_8000"
	ContainerResourcesCpu4000Ram9000  ContainerResources = "CPU_4000_RAM_9000"
	ContainerResourcesCpu4000Ram10000 ContainerResources = "CPU_4000_RAM_10000"
	ContainerResourcesCpu4000Ram11000 ContainerResources = "CPU_4000_RAM_11000"
	ContainerResourcesCpu4000Ram12000 ContainerResources = "CPU_4000_RAM_12000"
	ContainerResourcesCpu4000Ram13000 ContainerResources = "CPU_4000_RAM_13000"
	ContainerResourcesCpu4000Ram14000 ContainerResources = "CPU_4000_RAM_14000"
	ContainerResourcesCpu4000Ram15000 ContainerResources = "CPU_4000_RAM_15000"
	ContainerResourcesCpu4000Ram16000 ContainerResources = "CPU_4000_RAM_16000"
)

var AllContainerResources = []ContainerResources{
	ContainerResourcesCpu250Ram500,
	ContainerResourcesCpu250Ram1000,
	ContainerResourcesCpu250Ram2000,
	ContainerResourcesCpu250Ram3000,
	ContainerResourcesCpu250Ram4000,
	ContainerResourcesCpu250Ram5000,
	ContainerResourcesCpu250Ram6000,
	ContainerResourcesCpu250Ram7000,
	ContainerResourcesCpu250Ram8000,
	ContainerResourcesCpu250Ram9000,
	ContainerResourcesCpu250Ram10000,
	ContainerResourcesCpu250Ram11000,
	ContainerResourcesCpu250Ram12000,
	ContainerResourcesCpu250Ram13000,
	ContainerResourcesCpu250Ram14000,
	ContainerResourcesCpu250Ram15000,
	ContainerResourcesCpu250Ram16000,
	ContainerResourcesCpu500Ram500,
	ContainerResourcesCpu500Ram1000,
	ContainerResourcesCpu500Ram2000,
	ContainerResourcesCpu500Ram3000,
	ContainerResourcesCpu500Ram4000,
	ContainerResourcesCpu500Ram5000,
	ContainerResourcesCpu500Ram6000,
	ContainerResourcesCpu500Ram7000,
	ContainerResourcesCpu500Ram8000,
	ContainerResourcesCpu500Ram9000,
	ContainerResourcesCpu500Ram10000,
	ContainerResourcesCpu500Ram11000,
	ContainerResourcesCpu500Ram12000,
	ContainerResourcesCpu500Ram13000,
	ContainerResourcesCpu500Ram14000,
	ContainerResourcesCpu500Ram15000,
	ContainerResourcesCpu500Ram16000,
	ContainerResourcesCpu750Ram500,
	ContainerResourcesCpu750Ram1000,
	ContainerResourcesCpu750Ram2000,
	ContainerResourcesCpu750Ram3000,
	ContainerResourcesCpu750Ram4000,
	ContainerResourcesCpu750Ram5000,
	ContainerResourcesCpu750Ram6000,
	ContainerResourcesCpu750Ram7000,
	ContainerResourcesCpu750Ram8000,
	ContainerResourcesCpu750Ram9000,
	ContainerResourcesCpu750Ram10000,
	ContainerResourcesCpu750Ram11000,
	ContainerResourcesCpu750Ram12000,
	ContainerResourcesCpu750Ram13000,
	ContainerResourcesCpu750Ram14000,
	ContainerResourcesCpu750Ram15000,
	ContainerResourcesCpu750Ram16000,
	ContainerResourcesCpu1000Ram500,
	ContainerResourcesCpu1000Ram1000,
	ContainerResourcesCpu1000Ram2000,
	ContainerResourcesCpu1000Ram3000,
	ContainerResourcesCpu1000Ram4000,
	ContainerResourcesCpu1000Ram5000,
	ContainerResourcesCpu1000Ram6000,
	ContainerResourcesCpu1000Ram7000,
	ContainerResourcesCpu1000Ram8000,
	ContainerResourcesCpu1000Ram9000,
	ContainerResourcesCpu1000Ram10000,
	ContainerResourcesCpu1000Ram11000,
	ContainerResourcesCpu1000Ram12000,
	ContainerResourcesCpu1000Ram13000,
	ContainerResourcesCpu1000Ram14000,
	ContainerResourcesCpu1000Ram15000,
	ContainerResourcesCpu1000Ram16000,
	ContainerResourcesCpu2000Ram500,
	ContainerResourcesCpu2000Ram1000,
	ContainerResourcesCpu2000Ram2000,
	ContainerResourcesCpu2000Ram3000,
	ContainerResourcesCpu2000Ram4000,
	ContainerResourcesCpu2000Ram5000,
	ContainerResourcesCpu2000Ram6000,
	ContainerResourcesCpu2000Ram7000,
	ContainerResourcesCpu2000Ram8000,
	ContainerResourcesCpu2000Ram9000,
	ContainerResourcesCpu2000Ram10000,
	ContainerResourcesCpu2000Ram11000,
	ContainerResourcesCpu2000Ram12000,
	ContainerResourcesCpu2000Ram13000,
	ContainerResourcesCpu2000Ram14000,
	ContainerResourcesCpu2000Ram15000,
	ContainerResourcesCpu2000Ram16000,
	ContainerResourcesCpu3000Ram500,
	ContainerResourcesCpu3000Ram1000,
	ContainerResourcesCpu3000Ram2000,
	ContainerResourcesCpu3000Ram3000,
	ContainerResourcesCpu3000Ram4000,
	ContainerResourcesCpu3000Ram5000,
	ContainerResourcesCpu3000Ram6000,
	ContainerResourcesCpu3000Ram7000,
	ContainerResourcesCpu3000Ram8000,
	ContainerResourcesCpu3000Ram9000,
	ContainerResourcesCpu3000Ram10000,
	ContainerResourcesCpu3000Ram11000,
	ContainerResourcesCpu3000Ram12000,
	ContainerResourcesCpu3000Ram13000,
	ContainerResourcesCpu3000Ram14000,
	ContainerResourcesCpu3000Ram15000,
	ContainerResourcesCpu3000Ram16000,
	ContainerResourcesCpu4000Ram500,
	ContainerResourcesCpu4000Ram1000,
	ContainerResourcesCpu4000Ram2000,
	ContainerResourcesCpu4000Ram3000,
	ContainerResourcesCpu4000Ram4000,
	ContainerResourcesCpu4000Ram5000,
	ContainerResourcesCpu4000Ram6000,
	ContainerResourcesCpu4000Ram7000,
	ContainerResourcesCpu4000Ram8000,
	ContainerResourcesCpu4000Ram9000,
	ContainerResourcesCpu4000Ram10000,
	ContainerResourcesCpu4000Ram11000,
	ContainerResourcesCpu4000Ram12000,
	ContainerResourcesCpu4000Ram13000,
	ContainerResourcesCpu4000Ram14000,
	ContainerResourcesCpu4000Ram15000,
	ContainerResourcesCpu4000Ram16000,
}

// ContainerResult includes the GraphQL fields of Container requested by the fragment ContainerResult.
type ContainerResult struct {
	Name                 string                                                   `json:"name"`
	Image                string                                                   `json:"image"`
	PrivateRegistry      *ContainerResultPrivateRegistry                          `json:"privateRegistry"`
	Resources            ContainerResources                                       `json:"resources"`
	EnvironmentVariables []ContainerResultEnvironmentVariablesEnvironmentVariable `json:"environmentVariables"`
	Ports                []string                                                 `json:"ports"`
	Ingresses            []ContainerResultIngressesIngress                        `json:"ingresses"`
	Mounts               []ContainerResultMountsMount                             `json:"mounts"`
	HealthCheck          *ContainerResultHealthCheck                              `json:"healthCheck"`
	AvailableReplicas    int                                                      `json:"availableReplicas"`
	NumberOfReplicas     int                                                      `json:"numberOfReplicas"`
	AutoScaling          *ContainerResultAutoScaling                              `json:"autoScaling"`
	State                string                                                   `json:"state"`
	Locked               bool                                                     `json:"locked"`
}

// GetName returns ContainerResult.Name, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetName() string { return v.Name }

// GetImage returns ContainerResult.Image, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetImage() string { return v.Image }

// GetPrivateRegistry returns ContainerResult.PrivateRegistry, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetPrivateRegistry() *ContainerResultPrivateRegistry {
	return v.PrivateRegistry
}

// GetResources returns ContainerResult.Resources, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetResources() ContainerResources { return v.Resources }

// GetEnvironmentVariables returns ContainerResult.EnvironmentVariables, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetEnvironmentVariables() []ContainerResultEnvironmentVariablesEnvironmentVariable {
	return v.EnvironmentVariables
}

// GetPorts returns ContainerResult.Ports, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetPorts() []string { return v.Ports }

// GetIngresses returns ContainerResult.Ingresses, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetIngresses() []ContainerResultIngressesIngress { return v.Ingresses }

// GetMounts returns ContainerResult.Mounts, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetMounts() []ContainerResultMountsMount { return v.Mounts }

// GetHealthCheck returns ContainerResult.HealthCheck, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetHealthCheck() *ContainerResultHealthCheck { return v.HealthCheck }

// GetAvailableReplicas returns ContainerResult.AvailableReplicas, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetAvailableReplicas() int { return v.AvailableReplicas }

// GetNumberOfReplicas returns ContainerResult.NumberOfReplicas, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetNumberOfReplicas() int { return v.NumberOfReplicas }

// GetAutoScaling returns ContainerResult.AutoScaling, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetAutoScaling() *ContainerResultAutoScaling { return v.AutoScaling }

// GetState returns ContainerResult.State, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetState() string { return v.State }

// GetLocked returns ContainerResult.Locked, and is useful for accessing the field via an interface.
func (v *ContainerResult) GetLocked() bool { return v.Locked }

// ContainerResultAutoScaling includes the requested fields of the GraphQL type AutoScaling.
type ContainerResultAutoScaling struct {
	Replicas ContainerResultAutoScalingReplicas                     `json:"replicas"`
	Triggers []ContainerResultAutoScalingTriggersAutoScalingTrigger `json:"triggers"`
}

// GetReplicas returns ContainerResultAutoScaling.Replicas, and is useful for accessing the field via an interface.
func (v *ContainerResultAutoScaling) GetReplicas() ContainerResultAutoScalingReplicas {
	return v.Replicas
}

// GetTriggers returns ContainerResultAutoScaling.Triggers, and is useful for accessing the field via an interface.
func (v *ContainerResultAutoScaling) GetTriggers() []ContainerResultAutoScalingTriggersAutoScalingTrigger {
	return v.Triggers
}

// ContainerResultAutoScalingReplicas includes the requested fields of the GraphQL type AutoScalingReplicas.
type ContainerResultAutoScalingReplicas struct {
	Minimum int `json:"minimum"`
	Maximum int `json:"maximum"`
}

// GetMinimum returns ContainerResultAutoScalingReplicas.Minimum, and is useful for accessing the field via an interface.
func (v *ContainerResultAutoScalingReplicas) GetMinimum() int { return v.Minimum }

// GetMaximum returns ContainerResultAutoScalingReplicas.Maximum, and is useful for accessing the field via an interface.
func (v *ContainerResultAutoScalingReplicas) GetMaximum() int { return v.Maximum }

// ContainerResultAutoScalingTriggersAutoScalingTrigger includes the requested fields of the GraphQL type AutoScalingTrigger.
type ContainerResultAutoScalingTriggersAutoScalingTrigger struct {
	Type      string `json:"type"`
	Threshold int    `json:"threshold"`
}

// GetType returns ContainerResultAutoScalingTriggersAutoScalingTrigger.Type, and is useful for accessing the field via an interface.
func (v *ContainerResultAutoScalingTriggersAutoScalingTrigger) GetType() string { return v.Type }

// GetThreshold returns ContainerResultAutoScalingTriggersAutoScalingTrigger.Threshold, and is useful for accessing the field via an interface.
func (v *ContainerResultAutoScalingTriggersAutoScalingTrigger) GetThreshold() int { return v.Threshold }

// ContainerResultEnvironmentVariablesEnvironmentVariable includes the requested fields of the GraphQL type EnvironmentVariable.
type ContainerResultEnvironmentVariablesEnvironmentVariable struct {
	Name   string  `json:"name"`
	Value  *string `json:"value"`
	Secret bool    `json:"secret"`
}

// GetName returns ContainerResultEnvironmentVariablesEnvironmentVariable.Name, and is useful for accessing the field via an interface.
func (v *ContainerResultEnvironmentVariablesEnvironmentVariable) GetName() string { return v.Name }

// GetValue returns ContainerResultEnvironmentVariablesEnvironmentVariable.Value, and is useful for accessing the field via an interface.
func (v *ContainerResultEnvironmentVariablesEnvironmentVariable) GetValue() *string { return v.Value }

// GetSecret returns ContainerResultEnvironmentVariablesEnvironmentVariable.Secret, and is useful for accessing the field via an interface.
func (v *ContainerResultEnvironmentVariablesEnvironmentVariable) GetSecret() bool { return v.Secret }

// ContainerResultHealthCheck includes the requested fields of the GraphQL type HealthCheck.
type ContainerResultHealthCheck struct {
	Port int    `json:"port"`
	Path string `json:"path"`
}

// GetPort returns ContainerResultHealthCheck.Port, and is useful for accessing the field via an interface.
func (v *ContainerResultHealthCheck) GetPort() int { return v.Port }

// GetPath returns ContainerResultHealthCheck.Path, and is useful for accessing the field via an interface.
func (v *ContainerResultHealthCheck) GetPath() string { return v.Path }

// ContainerResultIngressesIngress includes the requested fields of the GraphQL type Ingress.
type ContainerResultIngressesIngress struct {
	DomainName string   `json:"domainName"`
	Port       int      `json:"port"`
	EnableTLS  bool     `json:"enableTLS"`
	Allowlist  []string `json:"allowlist"`
}

// GetDomainName returns ContainerResultIngressesIngress.DomainName, and is useful for accessing the field via an interface.
func (v *ContainerResultIngressesIngress) GetDomainName() string { return v.DomainName }

// GetPort returns ContainerResultIngressesIngress.Port, and is useful for accessing the field via an interface.
func (v *ContainerResultIngressesIngress) GetPort() int { return v.Port }

// GetEnableTLS returns ContainerResultIngressesIngress.EnableTLS, and is useful for accessing the field via an interface.
func (v *ContainerResultIngressesIngress) GetEnableTLS() bool { return v.EnableTLS }

// GetAllowlist returns ContainerResultIngressesIngress.Allowlist, and is useful for accessing the field via an interface.
func (v *ContainerResultIngressesIngress) GetAllowlist() []string { return v.Allowlist }

// ContainerResultMountsMount includes the requested fields of the GraphQL type Mount.
type ContainerResultMountsMount struct {
	Path   string                           `json:"path"`
	Volume ContainerResultMountsMountVolume `json:"volume"`
}

// GetPath returns ContainerResultMountsMount.Path, and is useful for accessing the field via an interface.
func (v *ContainerResultMountsMount) GetPath() string { return v.Path }

// GetVolume returns ContainerResultMountsMount.Volume, and is useful for accessing the field via an interface.
func (v *ContainerResultMountsMount) GetVolume() ContainerResultMountsMountVolume { return v.Volume }

// ContainerResultMountsMountVolume includes the requested fields of the GraphQL type Volume.
type ContainerResultMountsMountVolume struct {
	Name string `json:"name"`
}

// GetName returns ContainerResultMountsMountVolume.Name, and is useful for accessing the field via an interface.
func (v *ContainerResultMountsMountVolume) GetName() string { return v.Name }

// ContainerResultPrivateRegistry includes the requested fields of the GraphQL type PrivateRegistry.
type ContainerResultPrivateRegistry struct {
	Name string `json:"name"`
}

// GetName returns ContainerResultPrivateRegistry.Name, and is useful for accessing the field via an interface.
func (v *ContainerResultPrivateRegistry) GetName() string { return v.Name }

type EnvironmentVariableInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Secret bool   `json:"secret"`
	State  State  `json:"state"`
}

// GetName returns EnvironmentVariableInput.Name, and is useful for accessing the field via an interface.
func (v *EnvironmentVariableInput) GetName() string { return v.Name }

// GetValue returns EnvironmentVariableInput.Value, and is useful for accessing the field via an interface.
func (v *EnvironmentVariableInput) GetValue() string { return v.Value }

// GetSecret returns EnvironmentVariableInput.Secret, and is useful for accessing the field via an interface.
func (v *EnvironmentVariableInput) GetSecret() bool { return v.Secret }

// GetState returns EnvironmentVariableInput.State, and is useful for accessing the field via an interface.
func (v *EnvironmentVariableInput) GetState() State { return v.State }

type HealthCheckInput struct {
	Port int    `json:"port"`
	Path string `json:"path"`
}

// GetPort returns HealthCheckInput.Port, and is useful for accessing the field via an interface.
func (v *HealthCheckInput) GetPort() int { return v.Port }

// GetPath returns HealthCheckInput.Path, and is useful for accessing the field via an interface.
func (v *HealthCheckInput) GetPath() string { return v.Path }

type IngressInput struct {
	Port       int      `json:"port"`
	EnableTLS  bool     `json:"enableTLS"`
	Whitelist  []string `json:"whitelist"`
	DomainName *string  `json:"domainName"`
	State      State    `json:"state"`
}

// GetPort returns IngressInput.Port, and is useful for accessing the field via an interface.
func (v *IngressInput) GetPort() int { return v.Port }

// GetEnableTLS returns IngressInput.EnableTLS, and is useful for accessing the field via an interface.
func (v *IngressInput) GetEnableTLS() bool { return v.EnableTLS }

// GetWhitelist returns IngressInput.Whitelist, and is useful for accessing the field via an interface.
func (v *IngressInput) GetWhitelist() []string { return v.Whitelist }

// GetDomainName returns IngressInput.DomainName, and is useful for accessing the field via an interface.
func (v *IngressInput) GetDomainName() *string { return v.DomainName }

// GetState returns IngressInput.State, and is useful for accessing the field via an interface.
func (v *IngressInput) GetState() State { return v.State }

type ManualScalingInput struct {
	Replicas int `json:"replicas"`
}

// GetReplicas returns ManualScalingInput.Replicas, and is useful for accessing the field via an interface.
func (v *ManualScalingInput) GetReplicas() int { return v.Replicas }

type MountInput struct {
	// Path to mount the volume in the container.
	Path   string           `json:"path"`
	Volume MountVolumeInput `json:"volume"`
	// Set the expected state of this mount.
	// When the state is set to `ABSENT`, the mount will be removed, the volume will be kept.
	State State `json:"state"`
}

// GetPath returns MountInput.Path, and is useful for accessing the field via an interface.
func (v *MountInput) GetPath() string { return v.Path }

// GetVolume returns MountInput.Volume, and is useful for accessing the field via an interface.
func (v *MountInput) GetVolume() MountVolumeInput { return v.Volume }

// GetState returns MountInput.State, and is useful for accessing the field via an interface.
func (v *MountInput) GetState() State { return v.State }

type MountVolumeInput struct {
	// Create the volume if it does not exist.
	AutoCreate bool `json:"autoCreate"`
	// Increase the size of the volume if it already exists.
	Increase bool `json:"increase"`
	// Name of the volume
	Name string `json:"name"`
	// Size of the volume in GB
	Size *int `json:"size"`
}

// GetAutoCreate returns MountVolumeInput.AutoCreate, and is useful for accessing the field via an interface.
func (v *MountVolumeInput) GetAutoCreate() bool { return v.AutoCreate }

// GetIncrease returns MountVolumeInput.Increase, and is useful for accessing the field via an interface.
func (v *MountVolumeInput) GetIncrease() bool { return v.Increase }

// GetName returns MountVolumeInput.Name, and is useful for accessing the field via an interface.
func (v *MountVolumeInput) GetName() string { return v.Name }

// GetSize returns MountVolumeInput.Size, and is useful for accessing the field via an interface.
func (v *MountVolumeInput) GetSize() *int { return v.Size }

type NamespaceCreateInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

// GetName returns NamespaceCreateInput.Name, and is useful for accessing the field via an interface.
func (v *NamespaceCreateInput) GetName() string { return v.Name }

// GetDescription returns NamespaceCreateInput.Description, and is useful for accessing the field via an interface.
func (v *NamespaceCreateInput) GetDescription() *string { return v.Description }

// NamespaceResult includes the GraphQL fields of Namespace requested by the fragment NamespaceResult.
type NamespaceResult struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns NamespaceResult.Name, and is useful for accessing the field via an interface.
func (v *NamespaceResult) GetName() string { return v.Name }

// GetDescription returns NamespaceResult.Description, and is useful for accessing the field via an interface.
func (v *NamespaceResult) GetDescription() string { return v.Description }

type RegistryCreateInput struct {
	Namespace string `json:"namespace"`
	Name      string `json:"name"`
	Source    string `json:"source"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Verify    bool   `json:"verify"`
}

// GetNamespace returns RegistryCreateInput.Namespace, and is useful for accessing the field via an interface.
func (v *RegistryCreateInput) GetNamespace() string { return v.Namespace }

// GetName returns RegistryCreateInput.Name, and is useful for accessing the field via an interface.
func (v *RegistryCreateInput) GetName() string { return v.Name }

// GetSource returns RegistryCreateInput.Source, and is useful for accessing the field via an interface.
func (v *RegistryCreateInput) GetSource() string { return v.Source }

// GetUsername returns RegistryCreateInput.Username, and is useful for accessing the field via an interface.
func (v *RegistryCreateInput) GetUsername() string { return v.Username }

// GetPassword returns RegistryCreateInput.Password, and is useful for accessing the field via an interface.
func (v *RegistryCreateInput) GetPassword() string { return v.Password }

// GetVerify returns RegistryCreateInput.Verify, and is useful for accessing the field via an interface.
func (v *RegistryCreateInput) GetVerify() bool { return v.Verify }

// RegistryResult includes the GraphQL fields of PrivateRegistry requested by the fragment RegistryResult.
type RegistryResult struct {
	Name     string `json:"name"`
	Source   string `json:"source"`
	Username string `json:"username"`
	State    string `json:"state"`
	Locked   bool   `json:"locked"`
}

// GetName returns RegistryResult.Name, and is useful for accessing the field via an interface.
func (v *RegistryResult) GetName() string { return v.Name }

// GetSource returns RegistryResult.Source, and is useful for accessing the field via an interface.
func (v *RegistryResult) GetSource() string { return v.Source }

// GetUsername returns RegistryResult.Username, and is useful for accessing the field via an interface.
func (v *RegistryResult) GetUsername() string { return v.Username }

// GetState returns RegistryResult.State, and is useful for accessing the field via an interface.
func (v *RegistryResult) GetState() string { return v.State }

// GetLocked returns RegistryResult.Locked, and is useful for accessing the field via an interface.
func (v *RegistryResult) GetLocked() bool { return v.Locked }

type ReplicasInput struct {
	Minimum int `json:"minimum"`
	Maximum int `json:"maximum"`
}

// GetMinimum returns ReplicasInput.Minimum, and is useful for accessing the field via an interface.
func (v *ReplicasInput) GetMinimum() int { return v.Minimum }

// GetMaximum returns ReplicasInput.Maximum, and is useful for accessing the field via an interface.
func (v *ReplicasInput) GetMaximum() int { return v.Maximum }

type ScalingInput struct {
	Auto   *AutoScalingInput   `json:"auto"`
	Manual *ManualScalingInput `json:"manual"`
}

// GetAuto returns ScalingInput.Auto, and is useful for accessing the field via an interface.
func (v *ScalingInput) GetAuto() *AutoScalingInput { return v.Auto }

// GetManual returns ScalingInput.Manual, and is useful for accessing the field via an interface.
func (v *ScalingInput) GetManual() *ManualScalingInput { return v.Manual }

type State string

const (
	StatePresent State = "PRESENT"
	StateAbsent  State = "ABSENT"
)

var AllState = []State{
	StatePresent,
	StateAbsent,
}

type VolumeCreateInput struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Size      int    `json:"size"`
}

// GetName returns VolumeCreateInput.Name, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetName() string { return v.Name }

// GetNamespace returns VolumeCreateInput.Namespace, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetNamespace() string { return v.Namespace }

// GetSize returns VolumeCreateInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeCreateInput) GetSize() int { return v.Size }

type VolumeModifyInput struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Size      int    `json:"size"`
}

// GetName returns VolumeModifyInput.Name, and is useful for accessing the field via an interface.
func (v *VolumeModifyInput) GetName() string { return v.Name }

// GetNamespace returns VolumeModifyInput.Namespace, and is useful for accessing the field via an interface.
func (v *VolumeModifyInput) GetNamespace() string { return v.Namespace }

// GetSize returns VolumeModifyInput.Size, and is useful for accessing the field via an interface.
func (v *VolumeModifyInput) GetSize() int { return v.Size }

// VolumeResult includes the GraphQL fields of Volume requested by the fragment VolumeResult.
type VolumeResult struct {
	Name   string  `json:"name"`
	Size   float64 `json:"size"`
	Usage  float64 `json:"usage"`
	State  string  `json:"state"`
	Locked bool    `json:"locked"`
}

// GetName returns VolumeResult.Name, and is useful for accessing the field via an interface.
func (v *VolumeResult) GetName() string { return v.Name }

// GetSize returns VolumeResult.Size, and is useful for accessing the field via an interface.
func (v *VolumeResult) GetSize() float64 { return v.Size }

// GetUsage returns VolumeResult.Usage, and is useful for accessing the field via an interface.
func (v *VolumeResult) GetUsage() float64 { return v.Usage }

// GetState returns VolumeResult.State, and is useful for accessing the field via an interface.
func (v *VolumeResult) GetState() string { return v.State }

// GetLocked returns VolumeResult.Locked, and is useful for accessing the field via an interface.
func (v *VolumeResult) GetLocked() bool { return v.Locked }

// __containerCreateInput is used internally by genqlient
type __containerCreateInput struct {
	Input ContainerCreateInput `json:"input"`
}

// GetInput returns __containerCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__containerCreateInput) GetInput() ContainerCreateInput { return v.Input }

// __containerDeleteInput is used internally by genqlient
type __containerDeleteInput struct {
	Namespace string `json:"namespace"`
	Container string `json:"container"`
}

// GetNamespace returns __containerDeleteInput.Namespace, and is useful for accessing the field via an interface.
func (v *__containerDeleteInput) GetNamespace() string { return v.Namespace }

// GetContainer returns __containerDeleteInput.Container, and is useful for accessing the field via an interface.
func (v *__containerDeleteInput) GetContainer() string { return v.Container }

// __containerJobCreateInput is used internally by genqlient
type __containerJobCreateInput struct {
	ScheduledJob ContainerJobCreateInput `json:"scheduledJob"`
}

// GetScheduledJob returns __containerJobCreateInput.ScheduledJob, and is useful for accessing the field via an interface.
func (v *__containerJobCreateInput) GetScheduledJob() ContainerJobCreateInput { return v.ScheduledJob }

// __containerJobDeleteInput is used internally by genqlient
type __containerJobDeleteInput struct {
	NamesapceName    string `json:"namesapceName"`
	ContainerJobName string `json:"containerJobName"`
}

// GetNamesapceName returns __containerJobDeleteInput.NamesapceName, and is useful for accessing the field via an interface.
func (v *__containerJobDeleteInput) GetNamesapceName() string { return v.NamesapceName }

// GetContainerJobName returns __containerJobDeleteInput.ContainerJobName, and is useful for accessing the field via an interface.
func (v *__containerJobDeleteInput) GetContainerJobName() string { return v.ContainerJobName }

// __containerJobListInput is used internally by genqlient
type __containerJobListInput struct {
	NamespaceName string `json:"namespaceName"`
}

// GetNamespaceName returns __containerJobListInput.NamespaceName, and is useful for accessing the field via an interface.
func (v *__containerJobListInput) GetNamespaceName() string { return v.NamespaceName }

// __containerJobModifyInput is used internally by genqlient
type __containerJobModifyInput struct {
	ScheduledJob ContainerJobModifyInput `json:"scheduledJob"`
}

// GetScheduledJob returns __containerJobModifyInput.ScheduledJob, and is useful for accessing the field via an interface.
func (v *__containerJobModifyInput) GetScheduledJob() ContainerJobModifyInput { return v.ScheduledJob }

// __containerListInput is used internally by genqlient
type __containerListInput struct {
	NamespaceName string `json:"namespaceName"`
}

// GetNamespaceName returns __containerListInput.NamespaceName, and is useful for accessing the field via an interface.
func (v *__containerListInput) GetNamespaceName() string { return v.NamespaceName }

// __containerModifyInput is used internally by genqlient
type __containerModifyInput struct {
	Input ContainerModifyInput `json:"input"`
}

// GetInput returns __containerModifyInput.Input, and is useful for accessing the field via an interface.
func (v *__containerModifyInput) GetInput() ContainerModifyInput { return v.Input }

// __namespaceCreateInput is used internally by genqlient
type __namespaceCreateInput struct {
	Input NamespaceCreateInput `json:"input"`
}

// GetInput returns __namespaceCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__namespaceCreateInput) GetInput() NamespaceCreateInput { return v.Input }

// __namespaceDeleteInput is used internally by genqlient
type __namespaceDeleteInput struct {
	Name string `json:"name"`
}

// GetName returns __namespaceDeleteInput.Name, and is useful for accessing the field via an interface.
func (v *__namespaceDeleteInput) GetName() string { return v.Name }

// __namespaceListByNameInput is used internally by genqlient
type __namespaceListByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __namespaceListByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__namespaceListByNameInput) GetName() string { return v.Name }

// __registryCreateInput is used internally by genqlient
type __registryCreateInput struct {
	Input RegistryCreateInput `json:"input"`
}

// GetInput returns __registryCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__registryCreateInput) GetInput() RegistryCreateInput { return v.Input }

// __registryDeleteInput is used internally by genqlient
type __registryDeleteInput struct {
	NamespaceName string `json:"namespaceName"`
	RegistryName  string `json:"registryName"`
}

// GetNamespaceName returns __registryDeleteInput.NamespaceName, and is useful for accessing the field via an interface.
func (v *__registryDeleteInput) GetNamespaceName() string { return v.NamespaceName }

// GetRegistryName returns __registryDeleteInput.RegistryName, and is useful for accessing the field via an interface.
func (v *__registryDeleteInput) GetRegistryName() string { return v.RegistryName }

// __registryListInput is used internally by genqlient
type __registryListInput struct {
	NamespaceName string `json:"namespaceName"`
}

// GetNamespaceName returns __registryListInput.NamespaceName, and is useful for accessing the field via an interface.
func (v *__registryListInput) GetNamespaceName() string { return v.NamespaceName }

// __volumeCreateInput is used internally by genqlient
type __volumeCreateInput struct {
	Input VolumeCreateInput `json:"input"`
}

// GetInput returns __volumeCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__volumeCreateInput) GetInput() VolumeCreateInput { return v.Input }

// __volumeDeleteInput is used internally by genqlient
type __volumeDeleteInput struct {
	NamespaceName string `json:"namespaceName"`
	VolumeName    string `json:"volumeName"`
}

// GetNamespaceName returns __volumeDeleteInput.NamespaceName, and is useful for accessing the field via an interface.
func (v *__volumeDeleteInput) GetNamespaceName() string { return v.NamespaceName }

// GetVolumeName returns __volumeDeleteInput.VolumeName, and is useful for accessing the field via an interface.
func (v *__volumeDeleteInput) GetVolumeName() string { return v.VolumeName }

// __volumeIncreaseInput is used internally by genqlient
type __volumeIncreaseInput struct {
	Input VolumeModifyInput `json:"input"`
}

// GetInput returns __volumeIncreaseInput.Input, and is useful for accessing the field via an interface.
func (v *__volumeIncreaseInput) GetInput() VolumeModifyInput { return v.Input }

// __volumeListInput is used internally by genqlient
type __volumeListInput struct {
	NamespaceName string `json:"namespaceName"`
}

// GetNamespaceName returns __volumeListInput.NamespaceName, and is useful for accessing the field via an interface.
func (v *__volumeListInput) GetNamespaceName() string { return v.NamespaceName }

// containerCreateResponse is returned by containerCreate on success.
type containerCreateResponse struct {
	ContainerCreate ContainerResult `json:"containerCreate"`
}

// GetContainerCreate returns containerCreateResponse.ContainerCreate, and is useful for accessing the field via an interface.
func (v *containerCreateResponse) GetContainerCreate() ContainerResult { return v.ContainerCreate }

// containerDeleteResponse is returned by containerDelete on success.
type containerDeleteResponse struct {
	ContainerDelete bool `json:"containerDelete"`
}

// GetContainerDelete returns containerDeleteResponse.ContainerDelete, and is useful for accessing the field via an interface.
func (v *containerDeleteResponse) GetContainerDelete() bool { return v.ContainerDelete }

// containerJobCreateResponse is returned by containerJobCreate on success.
type containerJobCreateResponse struct {
	ContainerJobCreate ContainerJobResult `json:"containerJobCreate"`
}

// GetContainerJobCreate returns containerJobCreateResponse.ContainerJobCreate, and is useful for accessing the field via an interface.
func (v *containerJobCreateResponse) GetContainerJobCreate() ContainerJobResult {
	return v.ContainerJobCreate
}

// containerJobDeleteResponse is returned by containerJobDelete on success.
type containerJobDeleteResponse struct {
	ContainerJobDelete bool `json:"containerJobDelete"`
}

// GetContainerJobDelete returns containerJobDeleteResponse.ContainerJobDelete, and is useful for accessing the field via an interface.
func (v *containerJobDeleteResponse) GetContainerJobDelete() bool { return v.ContainerJobDelete }

// containerJobListNamespace includes the requested fields of the GraphQL type Namespace.
type containerJobListNamespace struct {
	ContainerJobs []containerJobListNamespaceContainerJobsContainerJob `json:"containerJobs"`
}

// GetContainerJobs returns containerJobListNamespace.ContainerJobs, and is useful for accessing the field via an interface.
func (v *containerJobListNamespace) GetContainerJobs() []containerJobListNamespaceContainerJobsContainerJob {
	return v.ContainerJobs
}

// containerJobListNamespaceContainerJobsContainerJob includes the requested fields of the GraphQL type ContainerJob.
type containerJobListNamespaceContainerJobsContainerJob struct {
	ContainerJobResult `json:"-"`
}

// GetName returns containerJobListNamespaceContainerJobsContainerJob.Name, and is useful for accessing the field via an interface.
func (v *containerJobListNamespaceContainerJobsContainerJob) GetName() string {
	return v.ContainerJobResult.Name
}

// GetImage returns containerJobListNamespaceContainerJobsContainerJob.Image, and is useful for accessing the field via an interface.
func (v *containerJobListNamespaceContainerJobsContainerJob) GetImage() string {
	return v.ContainerJobResult.Image
}

// GetEnabled returns containerJobListNamespaceContainerJobsContainerJob.Enabled, and is useful for accessing the field via an interface.
func (v *containerJobListNamespaceContainerJobsContainerJob) GetEnabled() bool {
	return v.ContainerJobResult.Enabled
}

// GetState returns containerJobListNamespaceContainerJobsContainerJob.State, and is useful for accessing the field via an interface.
func (v *containerJobListNamespaceContainerJobsContainerJob) GetState() string {
	return v.ContainerJobResult.State
}

func (v *containerJobListNamespaceContainerJobsContainerJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*containerJobListNamespaceContainerJobsContainerJob
		graphql.NoUnmarshalJSON
	}
	firstPass.containerJobListNamespaceContainerJobsContainerJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ContainerJobResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcontainerJobListNamespaceContainerJobsContainerJob struct {
	Name string `json:"name"`

	Image string `json:"image"`

	Enabled bool `json:"enabled"`

	State string `json:"state"`
}

func (v *containerJobListNamespaceContainerJobsContainerJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *containerJobListNamespaceContainerJobsContainerJob) __premarshalJSON() (*__premarshalcontainerJobListNamespaceContainerJobsContainerJob, error) {
	var retval __premarshalcontainerJobListNamespaceContainerJobsContainerJob

	retval.Name = v.ContainerJobResult.Name
	retval.Image = v.ContainerJobResult.Image
	retval.Enabled = v.ContainerJobResult.Enabled
	retval.State = v.ContainerJobResult.State
	return &retval, nil
}

// containerJobListResponse is returned by containerJobList on success.
type containerJobListResponse struct {
	Namespace containerJobListNamespace `json:"namespace"`
}

// GetNamespace returns containerJobListResponse.Namespace, and is useful for accessing the field via an interface.
func (v *containerJobListResponse) GetNamespace() containerJobListNamespace { return v.Namespace }

// containerJobModifyResponse is returned by containerJobModify on success.
type containerJobModifyResponse struct {
	ContainerJobModify ContainerJobResult `json:"containerJobModify"`
}

// GetContainerJobModify returns containerJobModifyResponse.ContainerJobModify, and is useful for accessing the field via an interface.
func (v *containerJobModifyResponse) GetContainerJobModify() ContainerJobResult {
	return v.ContainerJobModify
}

// containerListNamespace includes the requested fields of the GraphQL type Namespace.
type containerListNamespace struct {
	Containers []containerListNamespaceContainersContainer `json:"containers"`
}

// GetContainers returns containerListNamespace.Containers, and is useful for accessing the field via an interface.
func (v *containerListNamespace) GetContainers() []containerListNamespaceContainersContainer {
	return v.Containers
}

// containerListNamespaceContainersContainer includes the requested fields of the GraphQL type Container.
type containerListNamespaceContainersContainer struct {
	ContainerResult `json:"-"`
}

// GetName returns containerListNamespaceContainersContainer.Name, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetName() string { return v.ContainerResult.Name }

// GetImage returns containerListNamespaceContainersContainer.Image, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetImage() string { return v.ContainerResult.Image }

// GetPrivateRegistry returns containerListNamespaceContainersContainer.PrivateRegistry, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetPrivateRegistry() *ContainerResultPrivateRegistry {
	return v.ContainerResult.PrivateRegistry
}

// GetResources returns containerListNamespaceContainersContainer.Resources, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetResources() ContainerResources {
	return v.ContainerResult.Resources
}

// GetEnvironmentVariables returns containerListNamespaceContainersContainer.EnvironmentVariables, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetEnvironmentVariables() []ContainerResultEnvironmentVariablesEnvironmentVariable {
	return v.ContainerResult.EnvironmentVariables
}

// GetPorts returns containerListNamespaceContainersContainer.Ports, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetPorts() []string {
	return v.ContainerResult.Ports
}

// GetIngresses returns containerListNamespaceContainersContainer.Ingresses, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetIngresses() []ContainerResultIngressesIngress {
	return v.ContainerResult.Ingresses
}

// GetMounts returns containerListNamespaceContainersContainer.Mounts, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetMounts() []ContainerResultMountsMount {
	return v.ContainerResult.Mounts
}

// GetHealthCheck returns containerListNamespaceContainersContainer.HealthCheck, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetHealthCheck() *ContainerResultHealthCheck {
	return v.ContainerResult.HealthCheck
}

// GetAvailableReplicas returns containerListNamespaceContainersContainer.AvailableReplicas, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetAvailableReplicas() int {
	return v.ContainerResult.AvailableReplicas
}

// GetNumberOfReplicas returns containerListNamespaceContainersContainer.NumberOfReplicas, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetNumberOfReplicas() int {
	return v.ContainerResult.NumberOfReplicas
}

// GetAutoScaling returns containerListNamespaceContainersContainer.AutoScaling, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetAutoScaling() *ContainerResultAutoScaling {
	return v.ContainerResult.AutoScaling
}

// GetState returns containerListNamespaceContainersContainer.State, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetState() string { return v.ContainerResult.State }

// GetLocked returns containerListNamespaceContainersContainer.Locked, and is useful for accessing the field via an interface.
func (v *containerListNamespaceContainersContainer) GetLocked() bool { return v.ContainerResult.Locked }

func (v *containerListNamespaceContainersContainer) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*containerListNamespaceContainersContainer
		graphql.NoUnmarshalJSON
	}
	firstPass.containerListNamespaceContainersContainer = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ContainerResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcontainerListNamespaceContainersContainer struct {
	Name string `json:"name"`

	Image string `json:"image"`

	PrivateRegistry *ContainerResultPrivateRegistry `json:"privateRegistry"`

	Resources ContainerResources `json:"resources"`

	EnvironmentVariables []ContainerResultEnvironmentVariablesEnvironmentVariable `json:"environmentVariables"`

	Ports []string `json:"ports"`

	Ingresses []ContainerResultIngressesIngress `json:"ingresses"`

	Mounts []ContainerResultMountsMount `json:"mounts"`

	HealthCheck *ContainerResultHealthCheck `json:"healthCheck"`

	AvailableReplicas int `json:"availableReplicas"`

	NumberOfReplicas int `json:"numberOfReplicas"`

	AutoScaling *ContainerResultAutoScaling `json:"autoScaling"`

	State string `json:"state"`

	Locked bool `json:"locked"`
}

func (v *containerListNamespaceContainersContainer) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *containerListNamespaceContainersContainer) __premarshalJSON() (*__premarshalcontainerListNamespaceContainersContainer, error) {
	var retval __premarshalcontainerListNamespaceContainersContainer

	retval.Name = v.ContainerResult.Name
	retval.Image = v.ContainerResult.Image
	retval.PrivateRegistry = v.ContainerResult.PrivateRegistry
	retval.Resources = v.ContainerResult.Resources
	retval.EnvironmentVariables = v.ContainerResult.EnvironmentVariables
	retval.Ports = v.ContainerResult.Ports
	retval.Ingresses = v.ContainerResult.Ingresses
	retval.Mounts = v.ContainerResult.Mounts
	retval.HealthCheck = v.ContainerResult.HealthCheck
	retval.AvailableReplicas = v.ContainerResult.AvailableReplicas
	retval.NumberOfReplicas = v.ContainerResult.NumberOfReplicas
	retval.AutoScaling = v.ContainerResult.AutoScaling
	retval.State = v.ContainerResult.State
	retval.Locked = v.ContainerResult.Locked
	return &retval, nil
}

// containerListResponse is returned by containerList on success.
type containerListResponse struct {
	Namespace containerListNamespace `json:"namespace"`
}

// GetNamespace returns containerListResponse.Namespace, and is useful for accessing the field via an interface.
func (v *containerListResponse) GetNamespace() containerListNamespace { return v.Namespace }

// containerModifyResponse is returned by containerModify on success.
type containerModifyResponse struct {
	ContainerModify ContainerResult `json:"containerModify"`
}

// GetContainerModify returns containerModifyResponse.ContainerModify, and is useful for accessing the field via an interface.
func (v *containerModifyResponse) GetContainerModify() ContainerResult { return v.ContainerModify }

// namespaceCreateResponse is returned by namespaceCreate on success.
type namespaceCreateResponse struct {
	NamespaceCreate NamespaceResult `json:"namespaceCreate"`
}

// GetNamespaceCreate returns namespaceCreateResponse.NamespaceCreate, and is useful for accessing the field via an interface.
func (v *namespaceCreateResponse) GetNamespaceCreate() NamespaceResult { return v.NamespaceCreate }

// namespaceDeleteResponse is returned by namespaceDelete on success.
type namespaceDeleteResponse struct {
	NamespaceDelete bool `json:"namespaceDelete"`
}

// GetNamespaceDelete returns namespaceDeleteResponse.NamespaceDelete, and is useful for accessing the field via an interface.
func (v *namespaceDeleteResponse) GetNamespaceDelete() bool { return v.NamespaceDelete }

// namespaceListByNameNamespace includes the requested fields of the GraphQL type Namespace.
type namespaceListByNameNamespace struct {
	NamespaceResult `json:"-"`
}

// GetName returns namespaceListByNameNamespace.Name, and is useful for accessing the field via an interface.
func (v *namespaceListByNameNamespace) GetName() string { return v.NamespaceResult.Name }

// GetDescription returns namespaceListByNameNamespace.Description, and is useful for accessing the field via an interface.
func (v *namespaceListByNameNamespace) GetDescription() string { return v.NamespaceResult.Description }

func (v *namespaceListByNameNamespace) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*namespaceListByNameNamespace
		graphql.NoUnmarshalJSON
	}
	firstPass.namespaceListByNameNamespace = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NamespaceResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalnamespaceListByNameNamespace struct {
	Name string `json:"name"`

	Description string `json:"description"`
}

func (v *namespaceListByNameNamespace) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *namespaceListByNameNamespace) __premarshalJSON() (*__premarshalnamespaceListByNameNamespace, error) {
	var retval __premarshalnamespaceListByNameNamespace

	retval.Name = v.NamespaceResult.Name
	retval.Description = v.NamespaceResult.Description
	return &retval, nil
}

// namespaceListByNameResponse is returned by namespaceListByName on success.
type namespaceListByNameResponse struct {
	Namespace namespaceListByNameNamespace `json:"namespace"`
}

// GetNamespace returns namespaceListByNameResponse.Namespace, and is useful for accessing the field via an interface.
func (v *namespaceListByNameResponse) GetNamespace() namespaceListByNameNamespace { return v.Namespace }

// namespaceListNamespacesNamespace includes the requested fields of the GraphQL type Namespace.
type namespaceListNamespacesNamespace struct {
	NamespaceResult `json:"-"`
}

// GetName returns namespaceListNamespacesNamespace.Name, and is useful for accessing the field via an interface.
func (v *namespaceListNamespacesNamespace) GetName() string { return v.NamespaceResult.Name }

// GetDescription returns namespaceListNamespacesNamespace.Description, and is useful for accessing the field via an interface.
func (v *namespaceListNamespacesNamespace) GetDescription() string {
	return v.NamespaceResult.Description
}

func (v *namespaceListNamespacesNamespace) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*namespaceListNamespacesNamespace
		graphql.NoUnmarshalJSON
	}
	firstPass.namespaceListNamespacesNamespace = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NamespaceResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalnamespaceListNamespacesNamespace struct {
	Name string `json:"name"`

	Description string `json:"description"`
}

func (v *namespaceListNamespacesNamespace) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *namespaceListNamespacesNamespace) __premarshalJSON() (*__premarshalnamespaceListNamespacesNamespace, error) {
	var retval __premarshalnamespaceListNamespacesNamespace

	retval.Name = v.NamespaceResult.Name
	retval.Description = v.NamespaceResult.Description
	return &retval, nil
}

// namespaceListResponse is returned by namespaceList on success.
type namespaceListResponse struct {
	Namespaces []namespaceListNamespacesNamespace `json:"namespaces"`
}

// GetNamespaces returns namespaceListResponse.Namespaces, and is useful for accessing the field via an interface.
func (v *namespaceListResponse) GetNamespaces() []namespaceListNamespacesNamespace {
	return v.Namespaces
}

// registryCreateResponse is returned by registryCreate on success.
type registryCreateResponse struct {
	RegistryConnectionCreate RegistryResult `json:"registryConnectionCreate"`
}

// GetRegistryConnectionCreate returns registryCreateResponse.RegistryConnectionCreate, and is useful for accessing the field via an interface.
func (v *registryCreateResponse) GetRegistryConnectionCreate() RegistryResult {
	return v.RegistryConnectionCreate
}

// registryDeleteResponse is returned by registryDelete on success.
type registryDeleteResponse struct {
	RegistryConnectionDelete bool `json:"registryConnectionDelete"`
}

// GetRegistryConnectionDelete returns registryDeleteResponse.RegistryConnectionDelete, and is useful for accessing the field via an interface.
func (v *registryDeleteResponse) GetRegistryConnectionDelete() bool {
	return v.RegistryConnectionDelete
}

// registryListNamespace includes the requested fields of the GraphQL type Namespace.
type registryListNamespace struct {
	PrivateRegistries []registryListNamespacePrivateRegistriesPrivateRegistry `json:"privateRegistries"`
}

// GetPrivateRegistries returns registryListNamespace.PrivateRegistries, and is useful for accessing the field via an interface.
func (v *registryListNamespace) GetPrivateRegistries() []registryListNamespacePrivateRegistriesPrivateRegistry {
	return v.PrivateRegistries
}

// registryListNamespacePrivateRegistriesPrivateRegistry includes the requested fields of the GraphQL type PrivateRegistry.
type registryListNamespacePrivateRegistriesPrivateRegistry struct {
	RegistryResult `json:"-"`
}

// GetName returns registryListNamespacePrivateRegistriesPrivateRegistry.Name, and is useful for accessing the field via an interface.
func (v *registryListNamespacePrivateRegistriesPrivateRegistry) GetName() string {
	return v.RegistryResult.Name
}

// GetSource returns registryListNamespacePrivateRegistriesPrivateRegistry.Source, and is useful for accessing the field via an interface.
func (v *registryListNamespacePrivateRegistriesPrivateRegistry) GetSource() string {
	return v.RegistryResult.Source
}

// GetUsername returns registryListNamespacePrivateRegistriesPrivateRegistry.Username, and is useful for accessing the field via an interface.
func (v *registryListNamespacePrivateRegistriesPrivateRegistry) GetUsername() string {
	return v.RegistryResult.Username
}

// GetState returns registryListNamespacePrivateRegistriesPrivateRegistry.State, and is useful for accessing the field via an interface.
func (v *registryListNamespacePrivateRegistriesPrivateRegistry) GetState() string {
	return v.RegistryResult.State
}

// GetLocked returns registryListNamespacePrivateRegistriesPrivateRegistry.Locked, and is useful for accessing the field via an interface.
func (v *registryListNamespacePrivateRegistriesPrivateRegistry) GetLocked() bool {
	return v.RegistryResult.Locked
}

func (v *registryListNamespacePrivateRegistriesPrivateRegistry) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*registryListNamespacePrivateRegistriesPrivateRegistry
		graphql.NoUnmarshalJSON
	}
	firstPass.registryListNamespacePrivateRegistriesPrivateRegistry = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RegistryResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalregistryListNamespacePrivateRegistriesPrivateRegistry struct {
	Name string `json:"name"`

	Source string `json:"source"`

	Username string `json:"username"`

	State string `json:"state"`

	Locked bool `json:"locked"`
}

func (v *registryListNamespacePrivateRegistriesPrivateRegistry) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *registryListNamespacePrivateRegistriesPrivateRegistry) __premarshalJSON() (*__premarshalregistryListNamespacePrivateRegistriesPrivateRegistry, error) {
	var retval __premarshalregistryListNamespacePrivateRegistriesPrivateRegistry

	retval.Name = v.RegistryResult.Name
	retval.Source = v.RegistryResult.Source
	retval.Username = v.RegistryResult.Username
	retval.State = v.RegistryResult.State
	retval.Locked = v.RegistryResult.Locked
	return &retval, nil
}

// registryListResponse is returned by registryList on success.
type registryListResponse struct {
	Namespace registryListNamespace `json:"namespace"`
}

// GetNamespace returns registryListResponse.Namespace, and is useful for accessing the field via an interface.
func (v *registryListResponse) GetNamespace() registryListNamespace { return v.Namespace }

// volumeCreateResponse is returned by volumeCreate on success.
type volumeCreateResponse struct {
	VolumeCreate *VolumeResult `json:"volumeCreate"`
}

// GetVolumeCreate returns volumeCreateResponse.VolumeCreate, and is useful for accessing the field via an interface.
func (v *volumeCreateResponse) GetVolumeCreate() *VolumeResult { return v.VolumeCreate }

// volumeDeleteResponse is returned by volumeDelete on success.
type volumeDeleteResponse struct {
	VolumeDelete bool `json:"volumeDelete"`
}

// GetVolumeDelete returns volumeDeleteResponse.VolumeDelete, and is useful for accessing the field via an interface.
func (v *volumeDeleteResponse) GetVolumeDelete() bool { return v.VolumeDelete }

// volumeIncreaseResponse is returned by volumeIncrease on success.
type volumeIncreaseResponse struct {
	VolumeIncrease VolumeResult `json:"volumeIncrease"`
}

// GetVolumeIncrease returns volumeIncreaseResponse.VolumeIncrease, and is useful for accessing the field via an interface.
func (v *volumeIncreaseResponse) GetVolumeIncrease() VolumeResult { return v.VolumeIncrease }

// volumeListNamespace includes the requested fields of the GraphQL type Namespace.
type volumeListNamespace struct {
	Volumes []volumeListNamespaceVolumesVolume `json:"volumes"`
}

// GetVolumes returns volumeListNamespace.Volumes, and is useful for accessing the field via an interface.
func (v *volumeListNamespace) GetVolumes() []volumeListNamespaceVolumesVolume { return v.Volumes }

// volumeListNamespaceVolumesVolume includes the requested fields of the GraphQL type Volume.
type volumeListNamespaceVolumesVolume struct {
	VolumeResult `json:"-"`
}

// GetName returns volumeListNamespaceVolumesVolume.Name, and is useful for accessing the field via an interface.
func (v *volumeListNamespaceVolumesVolume) GetName() string { return v.VolumeResult.Name }

// GetSize returns volumeListNamespaceVolumesVolume.Size, and is useful for accessing the field via an interface.
func (v *volumeListNamespaceVolumesVolume) GetSize() float64 { return v.VolumeResult.Size }

// GetUsage returns volumeListNamespaceVolumesVolume.Usage, and is useful for accessing the field via an interface.
func (v *volumeListNamespaceVolumesVolume) GetUsage() float64 { return v.VolumeResult.Usage }

// GetState returns volumeListNamespaceVolumesVolume.State, and is useful for accessing the field via an interface.
func (v *volumeListNamespaceVolumesVolume) GetState() string { return v.VolumeResult.State }

// GetLocked returns volumeListNamespaceVolumesVolume.Locked, and is useful for accessing the field via an interface.
func (v *volumeListNamespaceVolumesVolume) GetLocked() bool { return v.VolumeResult.Locked }

func (v *volumeListNamespaceVolumesVolume) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*volumeListNamespaceVolumesVolume
		graphql.NoUnmarshalJSON
	}
	firstPass.volumeListNamespaceVolumesVolume = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VolumeResult)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvolumeListNamespaceVolumesVolume struct {
	Name string `json:"name"`

	Size float64 `json:"size"`

	Usage float64 `json:"usage"`

	State string `json:"state"`

	Locked bool `json:"locked"`
}

func (v *volumeListNamespaceVolumesVolume) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *volumeListNamespaceVolumesVolume) __premarshalJSON() (*__premarshalvolumeListNamespaceVolumesVolume, error) {
	var retval __premarshalvolumeListNamespaceVolumesVolume

	retval.Name = v.VolumeResult.Name
	retval.Size = v.VolumeResult.Size
	retval.Usage = v.VolumeResult.Usage
	retval.State = v.VolumeResult.State
	retval.Locked = v.VolumeResult.Locked
	return &retval, nil
}

// volumeListResponse is returned by volumeList on success.
type volumeListResponse struct {
	Namespace volumeListNamespace `json:"namespace"`
}

// GetNamespace returns volumeListResponse.Namespace, and is useful for accessing the field via an interface.
func (v *volumeListResponse) GetNamespace() volumeListNamespace { return v.Namespace }

// The mutation executed by containerCreate.
const containerCreate_Operation = `
mutation containerCreate ($input: ContainerCreateInput!) {
	containerCreate(containerInput: $input) {
		... ContainerResult
	}
}
fragment ContainerResult on Container {
	name
	image
	privateRegistry {
		name
	}
	resources
	environmentVariables {
		name
		value
		secret
	}
	ports
	ingresses {
		domainName
		port
		enableTLS
		allowlist
	}
	mounts {
		path
		volume {
			name
		}
	}
	healthCheck {
		port
		path
	}
	availableReplicas
	numberOfReplicas
	autoScaling {
		replicas {
			minimum
			maximum
		}
		triggers {
			type
			threshold
		}
	}
	state
	locked
}
`

func containerCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	input ContainerCreateInput,
) (data_ *containerCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerCreate",
		Query:  containerCreate_Operation,
		Variables: &__containerCreateInput{
			Input: input,
		},
	}

	data_ = &containerCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by containerDelete.
const containerDelete_Operation = `
mutation containerDelete ($namespace: String!, $container: String!) {
	containerDelete(container: {name:$container,namespace:$namespace})
}
`

func containerDelete(
	ctx_ context.Context,
	client_ graphql.Client,
	namespace string,
	container string,
) (data_ *containerDeleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerDelete",
		Query:  containerDelete_Operation,
		Variables: &__containerDeleteInput{
			Namespace: namespace,
			Container: container,
		},
	}

	data_ = &containerDeleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by containerJobCreate.
const containerJobCreate_Operation = `
mutation containerJobCreate ($scheduledJob: ContainerJobCreateInput!) {
	containerJobCreate(scheduledJob: $scheduledJob) {
		... ContainerJobResult
	}
}
fragment ContainerJobResult on ContainerJob {
	name
	image
	enabled
	state
}
`

func containerJobCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	scheduledJob ContainerJobCreateInput,
) (data_ *containerJobCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerJobCreate",
		Query:  containerJobCreate_Operation,
		Variables: &__containerJobCreateInput{
			ScheduledJob: scheduledJob,
		},
	}

	data_ = &containerJobCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by containerJobDelete.
const containerJobDelete_Operation = `
mutation containerJobDelete ($namesapceName: String!, $containerJobName: String!) {
	containerJobDelete(scheduledJob: {name:$containerJobName,namespace:$namesapceName})
}
`

func containerJobDelete(
	ctx_ context.Context,
	client_ graphql.Client,
	namesapceName string,
	containerJobName string,
) (data_ *containerJobDeleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerJobDelete",
		Query:  containerJobDelete_Operation,
		Variables: &__containerJobDeleteInput{
			NamesapceName:    namesapceName,
			ContainerJobName: containerJobName,
		},
	}

	data_ = &containerJobDeleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by containerJobList.
const containerJobList_Operation = `
query containerJobList ($namespaceName: String!) {
	namespace(name: $namespaceName) {
		containerJobs {
			... ContainerJobResult
		}
	}
}
fragment ContainerJobResult on ContainerJob {
	name
	image
	enabled
	state
}
`

func containerJobList(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaceName string,
) (data_ *containerJobListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerJobList",
		Query:  containerJobList_Operation,
		Variables: &__containerJobListInput{
			NamespaceName: namespaceName,
		},
	}

	data_ = &containerJobListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by containerJobModify.
const containerJobModify_Operation = `
mutation containerJobModify ($scheduledJob: ContainerJobModifyInput!) {
	containerJobModify(scheduledJob: $scheduledJob) {
		... ContainerJobResult
	}
}
fragment ContainerJobResult on ContainerJob {
	name
	image
	enabled
	state
}
`

func containerJobModify(
	ctx_ context.Context,
	client_ graphql.Client,
	scheduledJob ContainerJobModifyInput,
) (data_ *containerJobModifyResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerJobModify",
		Query:  containerJobModify_Operation,
		Variables: &__containerJobModifyInput{
			ScheduledJob: scheduledJob,
		},
	}

	data_ = &containerJobModifyResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by containerList.
const containerList_Operation = `
query containerList ($namespaceName: String!) {
	namespace(name: $namespaceName) {
		containers {
			... ContainerResult
		}
	}
}
fragment ContainerResult on Container {
	name
	image
	privateRegistry {
		name
	}
	resources
	environmentVariables {
		name
		value
		secret
	}
	ports
	ingresses {
		domainName
		port
		enableTLS
		allowlist
	}
	mounts {
		path
		volume {
			name
		}
	}
	healthCheck {
		port
		path
	}
	availableReplicas
	numberOfReplicas
	autoScaling {
		replicas {
			minimum
			maximum
		}
		triggers {
			type
			threshold
		}
	}
	state
	locked
}
`

func containerList(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaceName string,
) (data_ *containerListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerList",
		Query:  containerList_Operation,
		Variables: &__containerListInput{
			NamespaceName: namespaceName,
		},
	}

	data_ = &containerListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by containerModify.
const containerModify_Operation = `
mutation containerModify ($input: ContainerModifyInput!) {
	containerModify(containerInput: $input) {
		... ContainerResult
	}
}
fragment ContainerResult on Container {
	name
	image
	privateRegistry {
		name
	}
	resources
	environmentVariables {
		name
		value
		secret
	}
	ports
	ingresses {
		domainName
		port
		enableTLS
		allowlist
	}
	mounts {
		path
		volume {
			name
		}
	}
	healthCheck {
		port
		path
	}
	availableReplicas
	numberOfReplicas
	autoScaling {
		replicas {
			minimum
			maximum
		}
		triggers {
			type
			threshold
		}
	}
	state
	locked
}
`

func containerModify(
	ctx_ context.Context,
	client_ graphql.Client,
	input ContainerModifyInput,
) (data_ *containerModifyResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "containerModify",
		Query:  containerModify_Operation,
		Variables: &__containerModifyInput{
			Input: input,
		},
	}

	data_ = &containerModifyResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by namespaceCreate.
const namespaceCreate_Operation = `
mutation namespaceCreate ($input: NamespaceCreateInput!) {
	namespaceCreate(namespaceInput: $input) {
		... NamespaceResult
	}
}
fragment NamespaceResult on Namespace {
	name
	description
}
`

func namespaceCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	input NamespaceCreateInput,
) (data_ *namespaceCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "namespaceCreate",
		Query:  namespaceCreate_Operation,
		Variables: &__namespaceCreateInput{
			Input: input,
		},
	}

	data_ = &namespaceCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by namespaceDelete.
const namespaceDelete_Operation = `
mutation namespaceDelete ($name: String!) {
	namespaceDelete(namespace: {name:$name})
}
`

func namespaceDelete(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (data_ *namespaceDeleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "namespaceDelete",
		Query:  namespaceDelete_Operation,
		Variables: &__namespaceDeleteInput{
			Name: name,
		},
	}

	data_ = &namespaceDeleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by namespaceList.
const namespaceList_Operation = `
query namespaceList {
	namespaces {
		... NamespaceResult
	}
}
fragment NamespaceResult on Namespace {
	name
	description
}
`

func namespaceList(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *namespaceListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "namespaceList",
		Query:  namespaceList_Operation,
	}

	data_ = &namespaceListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by namespaceListByName.
const namespaceListByName_Operation = `
query namespaceListByName ($name: String!) {
	namespace(name: $name) {
		... NamespaceResult
	}
}
fragment NamespaceResult on Namespace {
	name
	description
}
`

func namespaceListByName(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (data_ *namespaceListByNameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "namespaceListByName",
		Query:  namespaceListByName_Operation,
		Variables: &__namespaceListByNameInput{
			Name: name,
		},
	}

	data_ = &namespaceListByNameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by registryCreate.
const registryCreate_Operation = `
mutation registryCreate ($input: RegistryCreateInput!) {
	registryConnectionCreate(registryInput: $input) {
		... RegistryResult
	}
}
fragment RegistryResult on PrivateRegistry {
	name
	source
	username
	state
	locked
}
`

func registryCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	input RegistryCreateInput,
) (data_ *registryCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "registryCreate",
		Query:  registryCreate_Operation,
		Variables: &__registryCreateInput{
			Input: input,
		},
	}

	data_ = &registryCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by registryDelete.
const registryDelete_Operation = `
mutation registryDelete ($namespaceName: String!, $registryName: String!) {
	registryConnectionDelete(registryConnection: {name:$registryName,namespace:$namespaceName})
}
`

func registryDelete(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaceName string,
	registryName string,
) (data_ *registryDeleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "registryDelete",
		Query:  registryDelete_Operation,
		Variables: &__registryDeleteInput{
			NamespaceName: namespaceName,
			RegistryName:  registryName,
		},
	}

	data_ = &registryDeleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by registryList.
const registryList_Operation = `
query registryList ($namespaceName: String!) {
	namespace(name: $namespaceName) {
		privateRegistries {
			... RegistryResult
		}
	}
}
fragment RegistryResult on PrivateRegistry {
	name
	source
	username
	state
	locked
}
`

func registryList(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaceName string,
) (data_ *registryListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "registryList",
		Query:  registryList_Operation,
		Variables: &__registryListInput{
			NamespaceName: namespaceName,
		},
	}

	data_ = &registryListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by volumeCreate.
const volumeCreate_Operation = `
mutation volumeCreate ($input: VolumeCreateInput!) {
	volumeCreate(volumeInput: $input) {
		... VolumeResult
	}
}
fragment VolumeResult on Volume {
	name
	size
	usage
	state
	locked
}
`

func volumeCreate(
	ctx_ context.Context,
	client_ graphql.Client,
	input VolumeCreateInput,
) (data_ *volumeCreateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "volumeCreate",
		Query:  volumeCreate_Operation,
		Variables: &__volumeCreateInput{
			Input: input,
		},
	}

	data_ = &volumeCreateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by volumeDelete.
const volumeDelete_Operation = `
mutation volumeDelete ($namespaceName: String!, $volumeName: String!) {
	volumeDelete(volume: {name:$volumeName,namespace:$namespaceName})
}
`

func volumeDelete(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaceName string,
	volumeName string,
) (data_ *volumeDeleteResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "volumeDelete",
		Query:  volumeDelete_Operation,
		Variables: &__volumeDeleteInput{
			NamespaceName: namespaceName,
			VolumeName:    volumeName,
		},
	}

	data_ = &volumeDeleteResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by volumeIncrease.
const volumeIncrease_Operation = `
mutation volumeIncrease ($input: VolumeModifyInput!) {
	volumeIncrease(volumeInput: $input) {
		... VolumeResult
	}
}
fragment VolumeResult on Volume {
	name
	size
	usage
	state
	locked
}
`

func volumeIncrease(
	ctx_ context.Context,
	client_ graphql.Client,
	input VolumeModifyInput,
) (data_ *volumeIncreaseResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "volumeIncrease",
		Query:  volumeIncrease_Operation,
		Variables: &__volumeIncreaseInput{
			Input: input,
		},
	}

	data_ = &volumeIncreaseResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by volumeList.
const volumeList_Operation = `
query volumeList ($namespaceName: String!) {
	namespace(name: $namespaceName) {
		volumes {
			... VolumeResult
		}
	}
}
fragment VolumeResult on Volume {
	name
	size
	usage
	state
	locked
}
`

func volumeList(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaceName string,
) (data_ *volumeListResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "volumeList",
		Query:  volumeList_Operation,
		Variables: &__volumeListInput{
			NamespaceName: namespaceName,
		},
	}

	data_ = &volumeListResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
